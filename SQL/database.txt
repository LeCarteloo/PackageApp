--------------------------------------------------------
--  File created - piÄ…tek-czerwca-12-2020   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence CENY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."CENY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence FUNKCJA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."FUNKCJA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ODBIORCA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."ODBIORCA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence POJAZDY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."POJAZDY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZESYLKA_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZESYLKA_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZESYLKI_INFO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZESYLKI_INFO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZEWOZ_INFO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZEWOZ_INFO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZEWOZ_INFO_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZEWOZ_INFO_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZEWOZ_OSOB_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZEWOZ_OSOB_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PRZEWOZ_OSOB_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."PRZEWOZ_OSOB_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNICY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNICY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNICY_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNICY_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNIK_KLIENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNIK_KLIENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNIK_KLIENT_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNIK_KLIENT_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNIK_PRACOWNIK_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNIK_PRACOWNIK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence UZYTKOWNIK_PRACOWNIK_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "C##FILIP"."UZYTKOWNIK_PRACOWNIK_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table CENY
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."CENY" 
   (	"ID_CENY" NUMBER, 
	"ILOSC_OSOB" FLOAT(126), 
	"ROZMIAR" FLOAT(126), 
	"WAGA" FLOAT(126), 
	"TYP" FLOAT(126), 
	"UBEZPIECZENIE" FLOAT(126), 
	"DZIEN" FLOAT(126)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FUNKCJA
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."FUNKCJA" 
   (	"ID_FUNKCJA" NUMBER, 
	"FUNKCJA" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ODBIORCA
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."ODBIORCA" 
   (	"ID_ODBIORCA" NUMBER, 
	"IMIE" VARCHAR2(30 BYTE), 
	"NAZWISKO" VARCHAR2(30 BYTE), 
	"PESEL" VARCHAR2(20 BYTE), 
	"KRAJ" VARCHAR2(30 BYTE), 
	"MIASTO" VARCHAR2(30 BYTE), 
	"ADRES" VARCHAR2(30 BYTE), 
	"NR_TEL" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table POJAZDY
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."POJAZDY" 
   (	"ID_POJAZD" NUMBER, 
	"MARKA" VARCHAR2(30 BYTE), 
	"TYP" VARCHAR2(30 BYTE), 
	"MODEL" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRZESYLKA
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."PRZESYLKA" 
   (	"ID_PRZESYLKA" NUMBER, 
	"ID_ODBIORCA" NUMBER, 
	"ID_KLIENT" NUMBER, 
	"ID_TRANSPORT" NUMBER, 
	"NAZWA_PRZESYLKI" VARCHAR2(30 BYTE), 
	"STATUS" VARCHAR2(30 BYTE), 
	"KOSZT" FLOAT(126), 
	"ID_PRACOWNIK" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRZESYLKI_INFO
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."PRZESYLKI_INFO" 
   (	"ID_TRANSPORT" NUMBER, 
	"TYP_PRZESYLKI" VARCHAR2(30 BYTE), 
	"ROZMIAR" VARCHAR2(30 BYTE), 
	"WAGA" FLOAT(126), 
	"UBEZPIECZENIE" VARCHAR2(20 BYTE), 
	"ID_POJAZD" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRZEWOZ_INFO
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."PRZEWOZ_INFO" 
   (	"ID_PRZEWOZ" NUMBER, 
	"ILOSC_OSOB" NUMBER, 
	"UBEZPIECZENIE" VARCHAR2(20 BYTE), 
	"ID_POJAZD" NUMBER, 
	"KRAJ" VARCHAR2(20 BYTE), 
	"MIASTO" VARCHAR2(20 BYTE), 
	"ADRES" VARCHAR2(20 BYTE), 
	"DATA_WYJAZDU" DATE, 
	"DATA_POWROTU" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRZEWOZ_OSOB
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."PRZEWOZ_OSOB" 
   (	"ID_PRZEWOZ_OSOB" NUMBER, 
	"ID_PRZEWOZ" NUMBER, 
	"ID_KLIENT" NUMBER, 
	"KOSZT" FLOAT(126), 
	"ID_PRACOWNIK" NUMBER, 
	"TYP_PRZEWOZU" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UZYTKOWNICY
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."UZYTKOWNICY" 
   (	"ID_UZYTKOWNIK" NUMBER, 
	"LOGIN" VARCHAR2(100 BYTE), 
	"HASLO" VARCHAR2(100 BYTE), 
	"ID_FUNKCJA" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UZYTKOWNIK_KLIENT
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" 
   (	"ID_KLIENT" NUMBER, 
	"IMIE" VARCHAR2(20 BYTE), 
	"NAZWISKO" VARCHAR2(20 BYTE), 
	"PESEL" NUMBER, 
	"NR_TEL" NUMBER, 
	"ADRES" VARCHAR2(20 BYTE), 
	"ID_UZYTKOWNIK" NUMBER, 
	"MIASTO" VARCHAR2(20 BYTE), 
	"KRAJ" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UZYTKOWNIK_PRACOWNIK
--------------------------------------------------------

  CREATE TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" 
   (	"ID_PRACOWNIK" NUMBER, 
	"IMIE" VARCHAR2(20 BYTE), 
	"NAZWISKO" VARCHAR2(20 BYTE), 
	"PESEL" NUMBER, 
	"NR_TEL" NUMBER, 
	"ID_UZYTKOWNIK" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into C##FILIP.CENY
SET DEFINE OFF;
Insert into C##FILIP.CENY (ID_CENY,ILOSC_OSOB,ROZMIAR,WAGA,TYP,UBEZPIECZENIE,DZIEN) values ('1','100','5','3','200','50','300');
REM INSERTING into C##FILIP.FUNKCJA
SET DEFINE OFF;
Insert into C##FILIP.FUNKCJA (ID_FUNKCJA,FUNKCJA) values ('1','Admin');
Insert into C##FILIP.FUNKCJA (ID_FUNKCJA,FUNKCJA) values ('2','Pracownik');
Insert into C##FILIP.FUNKCJA (ID_FUNKCJA,FUNKCJA) values ('3','Klient');
Insert into C##FILIP.FUNKCJA (ID_FUNKCJA,FUNKCJA) values ('4','Kurier');
REM INSERTING into C##FILIP.ODBIORCA
SET DEFINE OFF;
Insert into C##FILIP.ODBIORCA (ID_ODBIORCA,IMIE,NAZWISKO,PESEL,KRAJ,MIASTO,ADRES,NR_TEL) values ('161','Andrzej','Kowalski','12345678933','Niemcy','Berlin','Ul.Ber','333555677');
REM INSERTING into C##FILIP.POJAZDY
SET DEFINE OFF;
Insert into C##FILIP.POJAZDY (ID_POJAZD,MARKA,TYP,MODEL) values ('3','Scania','Transport paczek','Short');
Insert into C##FILIP.POJAZDY (ID_POJAZD,MARKA,TYP,MODEL) values ('4','Teslaa','Transport paczek','Semi Truckk');
Insert into C##FILIP.POJAZDY (ID_POJAZD,MARKA,TYP,MODEL) values ('1','Mercedes','Transport osÃ³b','3Yy');
Insert into C##FILIP.POJAZDY (ID_POJAZD,MARKA,TYP,MODEL) values ('66','Mercedes','Transport osÃ³b','3X');
REM INSERTING into C##FILIP.PRZESYLKA
SET DEFINE OFF;
Insert into C##FILIP.PRZESYLKA (ID_PRZESYLKA,ID_ODBIORCA,ID_KLIENT,ID_TRANSPORT,NAZWA_PRZESYLKI,STATUS,KOSZT,ID_PRACOWNIK) values ('143','161','88','143','Kanapa','Dostarczona','365','122');
Insert into C##FILIP.PRZESYLKA (ID_PRZESYLKA,ID_ODBIORCA,ID_KLIENT,ID_TRANSPORT,NAZWA_PRZESYLKI,STATUS,KOSZT,ID_PRACOWNIK) values ('142','161','141','142','Komputer','Rejestracja','285','122');
REM INSERTING into C##FILIP.PRZESYLKI_INFO
SET DEFINE OFF;
Insert into C##FILIP.PRZESYLKI_INFO (ID_TRANSPORT,TYP_PRZESYLKI,ROZMIAR,WAGA,UBEZPIECZENIE,ID_POJAZD) values ('141','Krajowy','5x5x5','35','T','3');
Insert into C##FILIP.PRZESYLKI_INFO (ID_TRANSPORT,TYP_PRZESYLKI,ROZMIAR,WAGA,UBEZPIECZENIE,ID_POJAZD) values ('143','MiÄ™dzynarodowy','5x5x5','30','T','4');
Insert into C##FILIP.PRZESYLKI_INFO (ID_TRANSPORT,TYP_PRZESYLKI,ROZMIAR,WAGA,UBEZPIECZENIE,ID_POJAZD) values ('101','Krajowy','3x3x3','15','N','4');
Insert into C##FILIP.PRZESYLKI_INFO (ID_TRANSPORT,TYP_PRZESYLKI,ROZMIAR,WAGA,UBEZPIECZENIE,ID_POJAZD) values ('142','MiÄ™dzynarodowy','2x2x2','5','T','3');
REM INSERTING into C##FILIP.PRZEWOZ_INFO
SET DEFINE OFF;
Insert into C##FILIP.PRZEWOZ_INFO (ID_PRZEWOZ,ILOSC_OSOB,UBEZPIECZENIE,ID_POJAZD,KRAJ,MIASTO,ADRES,DATA_WYJAZDU,DATA_POWROTU) values ('61','3','T','1','Polska','RzeszÃ³w','ul. Pigonia 1',to_date('20/08/01','RR/MM/DD'),to_date('20/07/28','RR/MM/DD'));
REM INSERTING into C##FILIP.PRZEWOZ_OSOB
SET DEFINE OFF;
REM INSERTING into C##FILIP.UZYTKOWNICY
SET DEFINE OFF;
Insert into C##FILIP.UZYTKOWNICY (ID_UZYTKOWNIK,LOGIN,HASLO,ID_FUNKCJA) values ('74','Jan','Jan','3');
Insert into C##FILIP.UZYTKOWNICY (ID_UZYTKOWNIK,LOGIN,HASLO,ID_FUNKCJA) values ('281','klient','klient','3');
Insert into C##FILIP.UZYTKOWNICY (ID_UZYTKOWNIK,LOGIN,HASLO,ID_FUNKCJA) values ('283','pracownik','pracownik','2');
Insert into C##FILIP.UZYTKOWNICY (ID_UZYTKOWNIK,LOGIN,HASLO,ID_FUNKCJA) values ('284','kurier','kurier','4');
Insert into C##FILIP.UZYTKOWNICY (ID_UZYTKOWNIK,LOGIN,HASLO,ID_FUNKCJA) values ('282','admin','admin','1');
REM INSERTING into C##FILIP.UZYTKOWNIK_KLIENT
SET DEFINE OFF;
Insert into C##FILIP.UZYTKOWNIK_KLIENT (ID_KLIENT,IMIE,NAZWISKO,PESEL,NR_TEL,ADRES,ID_UZYTKOWNIK,MIASTO,KRAJ) values ('141','Filip','Papiernik','12345678950','604333231','Ul. Wictoria 9','281','Berlin','Niemcy');
Insert into C##FILIP.UZYTKOWNIK_KLIENT (ID_KLIENT,IMIE,NAZWISKO,PESEL,NR_TEL,ADRES,ID_UZYTKOWNIK,MIASTO,KRAJ) values ('88','Filip','Kowalski','12345678910','604333545','ul. Veza 55','74','Berlin','Niemcy');
REM INSERTING into C##FILIP.UZYTKOWNIK_PRACOWNIK
SET DEFINE OFF;
Insert into C##FILIP.UZYTKOWNIK_PRACOWNIK (ID_PRACOWNIK,IMIE,NAZWISKO,PESEL,NR_TEL,ID_UZYTKOWNIK) values ('122','Filip','Papiernik','12345678910','604058936','283');
Insert into C##FILIP.UZYTKOWNIK_PRACOWNIK (ID_PRACOWNIK,IMIE,NAZWISKO,PESEL,NR_TEL,ID_UZYTKOWNIK) values ('123','Filip','Papiernik','12345678911','604058333','284');
Insert into C##FILIP.UZYTKOWNIK_PRACOWNIK (ID_PRACOWNIK,IMIE,NAZWISKO,PESEL,NR_TEL,ID_UZYTKOWNIK) values ('121','Filip','Papiernik','12345678912','604058666','282');
--------------------------------------------------------
--  DDL for Index CENY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."CENY_PK" ON "C##FILIP"."CENY" ("ID_CENY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FINAL_PRZESYLKA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."FINAL_PRZESYLKA_PK" ON "C##FILIP"."PRZESYLKA" ("ID_PRZESYLKA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FUNKCJA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."FUNKCJA_PK" ON "C##FILIP"."FUNKCJA" ("ID_FUNKCJA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ODBIORCA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."ODBIORCA_PK" ON "C##FILIP"."ODBIORCA" ("ID_ODBIORCA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index POJAZDY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."POJAZDY_PK" ON "C##FILIP"."POJAZDY" ("ID_POJAZD") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRZESYLKA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."PRZESYLKA_PK" ON "C##FILIP"."PRZESYLKI_INFO" ("ID_TRANSPORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRZESYLKA_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."PRZESYLKA_UK1" ON "C##FILIP"."PRZESYLKA" ("ID_TRANSPORT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRZEWOZ_OSOB_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."PRZEWOZ_OSOB_PK" ON "C##FILIP"."PRZEWOZ_OSOB" ("ID_PRZEWOZ_OSOB") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PRZEWOZ_OSOB_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."PRZEWOZ_OSOB_UK1" ON "C##FILIP"."PRZEWOZ_OSOB" ("ID_PRZEWOZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TYP_PRZEWOZU_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."TYP_PRZEWOZU_PK" ON "C##FILIP"."PRZEWOZ_INFO" ("ID_PRZEWOZ") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNICY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNICY_PK" ON "C##FILIP"."UZYTKOWNICY" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNICY_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNICY_UK1" ON "C##FILIP"."UZYTKOWNICY" ("LOGIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNIK_KLIENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNIK_KLIENT_PK" ON "C##FILIP"."UZYTKOWNIK_KLIENT" ("ID_KLIENT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNIK_KLIENT_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNIK_KLIENT_UK1" ON "C##FILIP"."UZYTKOWNIK_KLIENT" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNIK_PRACOWNIK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNIK_PRACOWNIK_PK" ON "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ("ID_PRACOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UZYTKOWNIK_PRACOWNIK_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "C##FILIP"."UZYTKOWNIK_PRACOWNIK_UK1" ON "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ("ID_UZYTKOWNIK") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger CENY_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."CENY_TRG" 
BEFORE INSERT ON CENY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_CENY IS NULL THEN
      SELECT CENY_SEQ.NEXTVAL INTO :NEW.ID_CENY FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."CENY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger DATA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."DATA" 
BEFORE INSERT OR UPDATE ON PRZEWOZ_INFO 
for each row
begin
if :new.DATA_WYJAZDU < CURRENT_TIMESTAMP OR :new.DATA_POWROTU < CURRENT_TIMESTAMP THEN
RAISE_APPLICATION_ERROR( -20050, 'Daty sa z przeszlosci!' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."DATA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger FUNKCJA_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."FUNKCJA_TRG" 
BEFORE INSERT ON FUNKCJA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_FUNKCJA IS NULL THEN
      SELECT FUNKCJA_SEQ.NEXTVAL INTO :NEW.ID_FUNKCJA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."FUNKCJA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_KRAJ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_KRAJ" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.KRAJ), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20035, 'Kraj moze zawierac tylko litery' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_KRAJ" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_MIASTO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_MIASTO" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.MIASTO), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20036, 'Miasto moze zawierac tylko litery' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_MIASTO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_NAZWISKO
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_NAZWISKO" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.NAZWISKO), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20034, 'Nazwisko moze zawierac tylko litery' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_NAZWISKO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_NUMER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_NUMER" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(:new.NR_TEL, ' +-.0123456789',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20032, 'NR_TEL moze zawierac tylko liczby' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_NUMER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_PESEL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_PESEL" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(:new.PESEL, ' +-.0123456789',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20031, 'PESEL moze zawierac tylko liczby' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_PESEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_TEKST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_TEKST" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.IMIE), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20033, 'Imie moze zawierac tylko litery' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_TEKST" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ODBIORCA_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."ODBIORCA_TRG" 
BEFORE INSERT ON ODBIORCA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_ODBIORCA IS NULL THEN
      SELECT ODBIORCA_SEQ.NEXTVAL INTO :NEW.ID_ODBIORCA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."ODBIORCA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PESEL_EXIST_ODBIORCA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PESEL_EXIST_ODBIORCA" BEFORE INSERT ON ODBIORCA 
FOR EACH ROW
DECLARE
zmienna NUMBER;
BEGIN
  SELECT
        COUNT(*)
    INTO zmienna
    FROM ODBIORCA
    WHERE ODBIORCA.PESEL = :new.PESEL;
    IF zmienna > 0 THEN
    raise_application_error(-20070, 'Taki Pesel juz istnieje!');
    END IF;
END;
/
ALTER TRIGGER "C##FILIP"."PESEL_EXIST_ODBIORCA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PESEL_EXIST_PRACOWNIK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PESEL_EXIST_PRACOWNIK" BEFORE INSERT ON UZYTKOWNIK_PRACOWNIK 
FOR EACH ROW
DECLARE
zmienna NUMBER;
BEGIN
  SELECT
        COUNT(*)
    INTO zmienna
    FROM UZYTKOWNIK_PRACOWNIK
    WHERE UZYTKOWNIK_PRACOWNIK.PESEL = :new.PESEL;
    IF zmienna > 0 THEN
    raise_application_error(-20070, 'Taki Pesel juz istnieje!');
    END IF;
END;
/
ALTER TRIGGER "C##FILIP"."PESEL_EXIST_PRACOWNIK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PESEL_EXSIT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PESEL_EXSIT" BEFORE INSERT ON UZYTKOWNIK_KLIENT
FOR EACH ROW
DECLARE
zmienna NUMBER;
BEGIN
  SELECT
        COUNT(*)
    INTO zmienna
    FROM UZYTKOWNIK_KLIENT
    WHERE UZYTKOWNIK_KLIENT.PESEL = :new.PESEL;
    IF zmienna > 0 THEN
    raise_application_error(-20070, 'Taki Pesel juz istnieje!');
    END IF;
END;
/
ALTER TRIGGER "C##FILIP"."PESEL_EXSIT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PESEL_TRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PESEL_TRIGGER" BEFORE INSERT ON ODBIORCA
FOR EACH ROW
begin
IF length(:new.PESEL) != 11 THEN
RAISE_APPLICATION_ERROR( -20030, 'PESEL musi mieÄ‡ 11 cyfr' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."PESEL_TRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PESEL_TRIGGER_KLIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PESEL_TRIGGER_KLIENT" BEFORE UPDATE ON UZYTKOWNIK_KLIENT
FOR EACH ROW
begin
IF length(:new.PESEL) != 11 THEN
RAISE_APPLICATION_ERROR( -20030, 'PESEL musi mieÄ‡ 11 cyfr' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."PESEL_TRIGGER_KLIENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger POJAZDY_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."POJAZDY_TRG" 
BEFORE INSERT ON POJAZDY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_POJAZD IS NULL THEN
      SELECT POJAZDY_SEQ.NEXTVAL INTO :NEW.ID_POJAZD FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."POJAZDY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRACOWNIK_LITERY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PRACOWNIK_LITERY" 
BEFORE INSERT OR UPDATE ON UZYTKOWNIK_PRACOWNIK
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.IMIE), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20091, 'Pole imie moze miec tylko litery' );
end if;
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.NAZWISKO), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20092, 'Pole nazwisko moze miec tylko litery' );
end if;
IF LENGTH(TO_CHAR(:new.PESEL)) != 11 THEN
RAISE_APPLICATION_ERROR( -20095, 'Pesel musi miec 11 cyfr' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."PRACOWNIK_LITERY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRZESYLKA_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PRZESYLKA_TRG" 
BEFORE INSERT ON PRZESYLKA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PRZESYLKA IS NULL THEN
      SELECT PRZESYLKA_SEQ.NEXTVAL INTO :NEW.ID_PRZESYLKA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."PRZESYLKA_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRZESYLKI_INFO_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PRZESYLKI_INFO_TRG" 
BEFORE INSERT ON PRZESYLKI_INFO 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_TRANSPORT IS NULL THEN
      SELECT PRZESYLKI_INFO_SEQ.NEXTVAL INTO :NEW.ID_TRANSPORT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."PRZESYLKI_INFO_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRZEWOZ_INFO_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PRZEWOZ_INFO_TRG" 
BEFORE INSERT ON PRZEWOZ_INFO 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PRZEWOZ IS NULL THEN
      SELECT PRZEWOZ_INFO_SEQ1.NEXTVAL INTO :NEW.ID_PRZEWOZ FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."PRZEWOZ_INFO_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PRZEWOZ_OSOB_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."PRZEWOZ_OSOB_TRG" 
BEFORE INSERT ON PRZEWOZ_OSOB 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PRZEWOZ_OSOB IS NULL THEN
      SELECT PRZEWOZ_OSOB_SEQ1.NEXTVAL INTO :NEW.ID_PRZEWOZ_OSOB FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."PRZEWOZ_OSOB_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger REJESTRACJA_LITERY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."REJESTRACJA_LITERY" 
BEFORE INSERT ON UZYTKOWNIK_KLIENT
FOR EACH ROW
begin
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.IMIE), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20091, 'Pole imie moze miec tylko litery' );
end if;
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.NAZWISKO), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20092, 'Pole nazwisko moze miec tylko litery' );
end if;
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.KRAJ), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20093, 'Pole kraj moze miec tylko litery' );
end if;
IF LENGTH(TRIM(TRANSLATE(LOWER(:new.MIASTO), ' +Ä…Ä‡Ä™Å„Å‚Ã³Å›Å¼Åºqabcdefghijklmnoprstuvwxyz',' '))) != 0 THEN
RAISE_APPLICATION_ERROR( -20094, 'Pole miasto moze miec tylko litery' );
end if;
IF LENGTH(TO_CHAR(:new.PESEL)) != 11 THEN
RAISE_APPLICATION_ERROR( -20095, 'Pesel musi miec 11 cyfr' );
end if;
end;
/
ALTER TRIGGER "C##FILIP"."REJESTRACJA_LITERY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UZYTKOWNICY_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."UZYTKOWNICY_TRG" 
BEFORE INSERT ON UZYTKOWNICY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_UZYTKOWNIK IS NULL THEN
      SELECT UZYTKOWNICY_SEQ1.NEXTVAL INTO :NEW.ID_UZYTKOWNIK FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."UZYTKOWNICY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UZYTKOWNIK_KLIENT_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."UZYTKOWNIK_KLIENT_TRG1" 
BEFORE INSERT ON UZYTKOWNIK_KLIENT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_KLIENT IS NULL THEN
      SELECT UZYTKOWNIK_KLIENT_SEQ1.NEXTVAL INTO :NEW.ID_KLIENT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."UZYTKOWNIK_KLIENT_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UZYTKOWNIK_PRACOWNIK_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "C##FILIP"."UZYTKOWNIK_PRACOWNIK_TRG1" 
BEFORE INSERT ON UZYTKOWNIK_PRACOWNIK 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID_PRACOWNIK IS NULL THEN
      SELECT UZYTKOWNIK_PRACOWNIK_SEQ1.NEXTVAL INTO :NEW.ID_PRACOWNIK FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "C##FILIP"."UZYTKOWNIK_PRACOWNIK_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Package CENA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."CENA" AS 

  PROCEDURE ceny_edytuj(c_id IN CENY.ID_CENY%TYPE,
                     c_osob IN CENY.ILOSC_OSOB%TYPE,
                     c_rozmiar IN CENY.ROZMIAR%TYPE,
                     c_waga IN CENY.WAGA%TYPE,
                     c_typ IN CENY.TYP%TYPE,
                     c_ubezpieczenie IN CENY.UBEZPIECZENIE%TYPE,
                     c_dzien IN CENY.DZIEN%TYPE
  );
  
END CENA;

/
--------------------------------------------------------
--  DDL for Package KURIER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."KURIER" AS 

  PROCEDURE zmien_status(zmien IN PRZESYLKA.STATUS%TYPE,
                        id IN PRZESYLKA.ID_PRZESYLKA%TYPE);

END KURIER;

/
--------------------------------------------------------
--  DDL for Package LOGOWANIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."LOGOWANIE" AS 

    PROCEDURE sprawdz( u_login IN UZYTKOWNICY.login%TYPE, 
    u_haslo IN UZYTKOWNICY.haslo%TYPE);
    
END LOGOWANIE;

/
--------------------------------------------------------
--  DDL for Package ODBIORCY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."ODBIORCY" AS 

  PROCEDURE dodaj_odbiorce(o_imie IN ODBIORCA.IMIE%TYPE,
                         o_nazwisko IN ODBIORCA.NAZWISKO%TYPE,
                         o_pesel IN ODBIORCA.PESEL%TYPE,
                         o_kraj IN ODBIORCA.KRAJ%TYPE,
                         o_miasto IN ODBIORCA.MIASTO%TYPE,
                         o_adres IN ODBIORCA.ADRES%TYPE,
                         o_nrtel IN ODBIORCA.NR_TEL%TYPE);
                         

END ODBIORCY;

/
--------------------------------------------------------
--  DDL for Package PACZKI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."PACZKI" AS 

    PROCEDURE dodaj_paczke(pi_typ IN PRZESYLKI_INFO.TYP_PRZESYLKI%TYPE,
                        pi_ROZMIAR IN PRZESYLKI_INFO.ROZMIAR%TYPE,
                        pi_waga IN PRZESYLKI_INFO.WAGA%TYPE,
                        pi_ubezpieczenie IN PRZESYLKI_INFO.UBEZPIECZENIE%TYPE,
                        pi_idpojazd IN PRZESYLKI_INFO.ID_POJAZD%TYPE,
                        p_idodbiorca IN PRZESYLKA.ID_ODBIORCA%TYPE,
                        p_idklient IN PRZESYLKA.ID_KLIENT%TYPE,
                        p_nazwa IN PRZESYLKA.NAZWA_PRZESYLKI%TYPE,
                        p_status IN PRZESYLKA.STATUS%TYPE,
                        p_koszt IN PRZESYLKA.KOSZT%TYPE,
                        p_idpracownik IN PRZESYLKA.ID_PRACOWNIK%TYPE);
                        
    PROCEDURE edytuj_paczke(pi_typ IN PRZESYLKI_INFO.TYP_PRZESYLKI%TYPE,
                        pi_rozmiar IN PRZESYLKI_INFO.ROZMIAR%TYPE,
                        pi_waga IN PRZESYLKI_INFO.WAGA%TYPE,
                        pi_ubezpieczenie IN PRZESYLKI_INFO.UBEZPIECZENIE%TYPE,
                        p_nazwa IN PRZESYLKA.NAZWA_PRZESYLKI%TYPE,
                        p_status IN PRZESYLKA.STATUS%TYPE,
                        p_koszt IN PRZESYLKA.KOSZT%TYPE,
                        pi_idTransport IN PRZESYLKI_INFO.ID_TRANSPORT%TYPE);                    
                        

END PACZKI;

/
--------------------------------------------------------
--  DDL for Package PESEL_SPRAWDZ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."PESEL_SPRAWDZ" AS 

  PROCEDURE pesel( p_pesel IN UZYTKOWNIK_KLIENT.PESEL%TYPE);

END PESEL_SPRAWDZ;

/
--------------------------------------------------------
--  DDL for Package POJAZD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."POJAZD" AS 

 FUNCTION pojazd_sprawdz(p_sprawdz VARCHAR2)  
                        RETURN NUMBER;
 PROCEDURE pojazd_dodaj(p_marka IN POJAZDY.MARKA%TYPE,
                    p_typ IN POJAZDY.TYP%TYPE,
                    p_model IN POJAZDY.MODEL%TYPE);
                    
 PROCEDURE pojazd_usun(p_id IN POJAZDY.ID_POJAZD%TYPE);    
 
 PROCEDURE pojazd_edytuj(p_marka IN POJAZDY.MARKA%TYPE,
                    p_typ IN POJAZDY.TYP%TYPE,
                    p_model IN POJAZDY.MODEL%TYPE,
                    p_id IN POJAZDY.ID_POJAZD%TYPE);
END POJAZD;

/
--------------------------------------------------------
--  DDL for Package PRZEWOZ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."PRZEWOZ" AS 

 PROCEDURE dodaj_przewoz(przi_ilosc IN PRZEWOZ_INFO.ILOSC_OSOB%TYPE,
                        przi_ubezpieczenie IN PRZEWOZ_INFO.UBEZPIECZENIE%TYPE,
                        przi_idpojazd IN PRZEWOZ_INFO.ID_POJAZD%TYPE,
                        przi_kraj IN PRZEWOZ_INFO.KRAJ%TYPE,
                        przi_miasto IN PRZEWOZ_INFO.MIASTO%TYPE,
                        przi_adres IN PRZEWOZ_INFO.ADRES%TYPE,
                        przi_datawyj IN PRZEWOZ_INFO.DATA_WYJAZDU%TYPE,
                        przi_datapow IN PRZEWOZ_INFO.DATA_POWROTU%TYPE,
                        prz_idklient IN PRZEWOZ_OSOB.ID_KLIENT%TYPE,
                        prz_koszt IN PRZEWOZ_OSOB.KOSZT%TYPE,
                        prz_idpracownik IN PRZEWOZ_OSOB.ID_PRACOWNIK%TYPE,
                        prz_typ IN PRZEWOZ_OSOB.TYP_PRZEWOZU%TYPE);
                        
   PROCEDURE edytuj_przewoz(przi_ilosc IN PRZEWOZ_INFO.ILOSC_OSOB%TYPE,
                        przi_ubezpieczenie IN PRZEWOZ_INFO.UBEZPIECZENIE%TYPE,
                        przi_kraj IN PRZEWOZ_INFO.KRAJ%TYPE,
                        przi_miasto IN PRZEWOZ_INFO.MIASTO%TYPE,
                        przi_adres IN PRZEWOZ_INFO.ADRES%TYPE,
                        przi_datawyj IN PRZEWOZ_INFO.DATA_WYJAZDU%TYPE,
                        przi_datapow IN PRZEWOZ_INFO.DATA_POWROTU%TYPE,
                        prz_koszt IN PRZEWOZ_OSOB.KOSZT%TYPE,
                        przi_idprzewoz IN PRZEWOZ_INFO.ID_PRZEWOZ%TYPE
   );                     
   
   FUNCTION data_sprawdz(d_sprawdz DATE,d1_sprawdz DATE)  
                        RETURN NUMBER;
                        
END PRZEWOZ;

/
--------------------------------------------------------
--  DDL for Package REJESTRACJA_KLIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."REJESTRACJA_KLIENT" AS 
                      
  PROCEDURE zarejestruj_klient(k_login  IN  UZYTKOWNICY.LOGIN%TYPE,
                      k_haslo  IN  UZYTKOWNICY.HASLO%TYPE,
                      k_idfunkcja in UZYTKOWNICY.ID_FUNKCJA%TYPE,
                      k_imie in UZYTKOWNIK_KLIENT.IMIE%TYPE,
                      k_nazwisko in UZYTKOWNIK_KLIENT.NAZWISKO%TYPE,
                      k_pesel in UZYTKOWNIK_KLIENT.PESEL%TYPE,
                      k_nrtel in UZYTKOWNIK_KLIENT.NR_TEL%TYPE,
                      k_adres in UZYTKOWNIK_KLIENT.ADRES%TYPE,
                      k_miasto in UZYTKOWNIK_KLIENT.MIASTO%TYPE,
                      k_kraj in UZYTKOWNIK_KLIENT.KRAJ%TYPE);      
                      
   PROCEDURE edytuj_klient(k_imie in UZYTKOWNIK_KLIENT.IMIE%TYPE,
                      k_nazwisko in UZYTKOWNIK_KLIENT.NAZWISKO%TYPE,
                      k_pesel in UZYTKOWNIK_KLIENT.PESEL%TYPE,
                      k_nrtel in UZYTKOWNIK_KLIENT.NR_TEL%TYPE,
                      k_adres in UZYTKOWNIK_KLIENT.ADRES%TYPE,
                      k_miasto in UZYTKOWNIK_KLIENT.MIASTO%TYPE,
                      k_kraj in UZYTKOWNIK_KLIENT.KRAJ%TYPE,
                      k_idklient in UZYTKOWNIK_KLIENT.ID_KLIENT%TYPE);
                      

END REJESTRACJA_KLIENT;

/
--------------------------------------------------------
--  DDL for Package REJESTRACJA_PRACOWNIK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."REJESTRACJA_PRACOWNIK" AS 

  PROCEDURE  zarejestruj_pracownik(u_login IN UZYTKOWNICY.LOGIN%TYPE,
                                u_haslo IN UZYTKOWNICY.HASLO%TYPE,
                                u_idfunkcja IN UZYTKOWNICY.ID_FUNKCJA%TYPE,
                                p_imie IN UZYTKOWNIK_PRACOWNIK.IMIE%TYPE,
                                p_nazwisko IN UZYTKOWNIK_PRACOWNIK.NAZWISKO%TYPE,
                                p_pesel IN UZYTKOWNIK_PRACOWNIK.PESEL%TYPE,
                                p_nrtel IN UZYTKOWNIK_PRACOWNIK.NR_TEL%TYPE);
                                
    PROCEDURE pracownik_usun(p_id IN UZYTKOWNIK_PRACOWNIK.ID_UZYTKOWNIK%TYPE); 
    
    PROCEDURE pracownik_edytuj( u_haslo IN UZYTKOWNICY.HASLO%TYPE,
                                u_funkcja IN UZYTKOWNICY.ID_FUNKCJA%TYPE,
                                u_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE,
                                p_imie IN UZYTKOWNIK_PRACOWNIK.IMIE%TYPE,
                                p_nazwisko IN UZYTKOWNIK_PRACOWNIK.NAZWISKO%TYPE,
                                p_pesel IN UZYTKOWNIK_PRACOWNIK.PESEL%TYPE,
                                p_nrtel IN UZYTKOWNIK_PRACOWNIK.NR_TEL%TYPE);
                                    
END REJESTRACJA_PRACOWNIK;

/
--------------------------------------------------------
--  DDL for Package WYPELNIJ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."WYPELNIJ" AS 
  --admin
  PROCEDURE wypelnij_pracownik(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_pojazd(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_paczki(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_transport(p_wynik OUT SYS_REFCURSOR);
  
  --pracownik
  PROCEDURE wypelnij_klient(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_odbiorca(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_pojazdP(p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_pojazdO(p_wynik OUT SYS_REFCURSOR);
  
  --kurier
  PROCEDURE wypelnij_paczkiKurier(p_wynik OUT SYS_REFCURSOR);
  
  --klient
  PROCEDURE wypelnij_transportKlient(id IN PRZEWOZ_OSOB.ID_KLIENT%TYPE, p_wynik OUT SYS_REFCURSOR);
  
  PROCEDURE wypelnij_paczkiKlient(id IN NUMBER, p_wynik OUT SYS_REFCURSOR);
  
END WYPELNIJ;

/
--------------------------------------------------------
--  DDL for Package WYSZUKIWANIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "C##FILIP"."WYSZUKIWANIE" AS 

 PROCEDURE szukaj_pracownika(u_szukane IN VARCHAR2,
                            u_wynik OUT SYS_REFCURSOR);
                            
 PROCEDURE szukaj_odbiorcy(o_szukane IN VARCHAR2,
                            o_wynik OUT SYS_REFCURSOR );    
                            
  PROCEDURE szukaj_klient(k_szukane IN VARCHAR2,
                            k_wynik OUT SYS_REFCURSOR);
                            
  PROCEDURE szukaj_paczki(p_szukane IN VARCHAR2,
                            p_wynik OUT SYS_REFCURSOR,  p_id IN NUMBER);     
                            
  PROCEDURE szukaj_transport(t_szukane IN VARCHAR2,
                            t_wynik OUT SYS_REFCURSOR, t_id IN NUMBER);   
                            
  PROCEDURE szukaj_pojazdy(p_szukane IN VARCHAR2,
                            p_wynik OUT SYS_REFCURSOR );

END WYSZUKIWANIE;

/
--------------------------------------------------------
--  DDL for Package Body CENA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."CENA" AS

  PROCEDURE ceny_edytuj(c_id IN CENY.ID_CENY%TYPE,
                     c_osob IN CENY.ILOSC_OSOB%TYPE,
                     c_rozmiar IN CENY.ROZMIAR%TYPE,
                     c_waga IN CENY.WAGA%TYPE,
                     c_typ IN CENY.TYP%TYPE,
                     c_ubezpieczenie IN CENY.UBEZPIECZENIE%TYPE,
                     c_dzien IN CENY.DZIEN%TYPE) AS
    V_ROWID ROWID;
    BEGIN
    SELECT ROWID
    INTO   V_ROWID
    FROM   CENY
    WHERE  ID_CENY = c_id
    FOR UPDATE;

    UPDATE CENY
    SET    ILOSC_OSOB = c_osob, ROZMIAR = c_rozmiar, WAGA = c_waga, TYP = c_typ, UBEZPIECZENIE = c_ubezpieczenie, DZIEN = c_dzien
    WHERE  rowid    = v_rowid;
    COMMIT;
    END;

END CENA;

/
--------------------------------------------------------
--  DDL for Package Body KURIER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."KURIER" AS

  PROCEDURE zmien_status(zmien IN PRZESYLKA.STATUS%TYPE,
                        id IN PRZESYLKA.ID_PRZESYLKA%TYPE) AS
    V_ROWID ROWID;
    BEGIN
    SELECT ROWID
    INTO   V_ROWID
    FROM   PRZESYLKA
    WHERE  ID_PRZESYLKA = id
    FOR UPDATE;

    UPDATE PRZESYLKA
    SET    STATUS = zmien
    WHERE  rowid    = v_rowid;
    COMMIT;
    END;
    
END KURIER;

/
--------------------------------------------------------
--  DDL for Package Body LOGOWANIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."LOGOWANIE" AS
    PROCEDURE sprawdz
    ( u_login IN UZYTKOWNICY.login%TYPE,
    u_haslo IN UZYTKOWNICY.haslo%TYPE
    ) AS
    zmienna VARCHAR2(1);
        BEGIN
            SELECT '1'
                into zmienna
            FROM
                UZYTKOWNICY
            WHERE
                login = u_login
                AND haslo = u_haslo;
        EXCEPTION
            WHEN no_data_found THEN
                raise_application_error(-20000, 'Podales zle dane');
        END sprawdz;
END LOGOWANIE;

/
--------------------------------------------------------
--  DDL for Package Body ODBIORCY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."ODBIORCY" AS

  PROCEDURE dodaj_odbiorce(o_imie IN ODBIORCA.IMIE%TYPE,
                         o_nazwisko IN ODBIORCA.NAZWISKO%TYPE,
                         o_pesel IN ODBIORCA.PESEL%TYPE,
                         o_kraj IN ODBIORCA.KRAJ%TYPE,
                         o_miasto IN ODBIORCA.MIASTO%TYPE,
                         o_adres IN ODBIORCA.ADRES%TYPE,
                         o_nrtel IN ODBIORCA.NR_TEL%TYPE) AS
   BEGIN
    INSERT INTO ODBIORCA
    (
    IMIE,
    NAZWISKO,
    PESEL,
    KRAJ,
    MIASTO,
    ADRES,
    NR_TEL
    )
    VALUES(
    o_imie,
    o_nazwisko,
    o_pesel,
    o_kraj,
    o_miasto,
    o_adres,
    o_nrtel
    );
    COMMIT;
  END dodaj_odbiorce;

END ODBIORCY;

/
--------------------------------------------------------
--  DDL for Package Body PACZKI
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."PACZKI" AS

  PROCEDURE dodaj_paczke(pi_typ IN PRZESYLKI_INFO.TYP_PRZESYLKI%TYPE,
                        pi_rozmiar IN PRZESYLKI_INFO.ROZMIAR%TYPE,
                        pi_waga IN PRZESYLKI_INFO.WAGA%TYPE,
                        pi_ubezpieczenie IN PRZESYLKI_INFO.UBEZPIECZENIE%TYPE,
                        pi_idpojazd IN PRZESYLKI_INFO.ID_POJAZD%TYPE,
                        p_idodbiorca IN PRZESYLKA.ID_ODBIORCA%TYPE,
                        p_idklient IN PRZESYLKA.ID_KLIENT%TYPE,
                        p_nazwa IN PRZESYLKA.NAZWA_PRZESYLKI%TYPE,
                        p_status IN PRZESYLKA.STATUS%TYPE,
                        p_koszt IN PRZESYLKA.KOSZT%TYPE,
                        p_idpracownik IN PRZESYLKA.ID_PRACOWNIK%TYPE)
  IS
  zmienna NUMBER;
  BEGIN
  INSERT INTO PRZESYLKI_INFO(
  TYP_PRZESYLKI,
  ROZMIAR,
  WAGA,
  UBEZPIECZENIE,
  ID_POJAZD
  )
  VALUES
  (
  pi_typ,
  pi_rozmiar,
  pi_waga,
  pi_ubezpieczenie,
  pi_idpojazd
  ) RETURNING ID_TRANSPORT INTO zmienna;
  
  INSERT INTO PRZESYLKA(
  ID_ODBIORCA,
  ID_KLIENT,
  ID_TRANSPORT,
  NAZWA_PRZESYLKI,
  STATUS,
  KOSZT,
  ID_PRACOWNIK
  )
  VALUES(
  p_idodbiorca,
  p_idklient,
  zmienna,
  p_nazwa,
  p_status,
  p_koszt,
  p_idpracownik
  );
  COMMIT;
  
  
  END dodaj_paczke;

  PROCEDURE edytuj_paczke(pi_typ IN PRZESYLKI_INFO.TYP_PRZESYLKI%TYPE,
                        pi_rozmiar IN PRZESYLKI_INFO.ROZMIAR%TYPE,
                        pi_waga IN PRZESYLKI_INFO.WAGA%TYPE,
                        pi_ubezpieczenie IN PRZESYLKI_INFO.UBEZPIECZENIE%TYPE,
                        p_nazwa IN PRZESYLKA.NAZWA_PRZESYLKI%TYPE,
                        p_status IN PRZESYLKA.STATUS%TYPE,
                        p_koszt IN PRZESYLKA.KOSZT%TYPE,
                        pi_idTransport IN PRZESYLKI_INFO.ID_TRANSPORT%TYPE) AS
                        V_ROWID ROWID;
   BEGIN                
    SELECT ROWID
    INTO   V_ROWID
    FROM   PRZESYLKA
    WHERE  ID_TRANSPORT = pi_idTransport
    FOR UPDATE;

    UPDATE PRZESYLKA
    SET    NAZWA_PRZESYLKI = p_nazwa, STATUS = p_status, KOSZT = p_koszt
    WHERE  rowid    = v_rowid;
    COMMIT;
    
    SELECT ROWID
    INTO   V_ROWID
    FROM   PRZESYLKI_INFO
    WHERE  ID_TRANSPORT = pi_idTransport
    FOR UPDATE;

    UPDATE PRZESYLKI_INFO
    SET    TYP_PRZESYLKI = pi_typ, ROZMIAR = pi_rozmiar, WAGA = pi_waga, UBEZPIECZENIE = pi_ubezpieczenie
    WHERE  rowid    = v_rowid;
    COMMIT;
    
    
    END;

END PACZKI;

/
--------------------------------------------------------
--  DDL for Package Body PESEL_SPRAWDZ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."PESEL_SPRAWDZ" AS

  PROCEDURE pesel( p_pesel IN UZYTKOWNIK_KLIENT.PESEL%TYPE) AS
  zmienna NUMBER;
  BEGIN
    SELECT
        COUNT(*)
    INTO zmienna
    FROM UZYTKOWNIK_KLIENT
    WHERE UZYTKOWNIK_KLIENT.PESEL = p_pesel;
    IF zmienna > 0 THEN
    raise_application_error(-20070, 'Taki Pesel juz istnieje!');
    END IF;
  END pesel;

END PESEL_SPRAWDZ;

/
--------------------------------------------------------
--  DDL for Package Body POJAZD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."POJAZD" AS

  FUNCTION pojazd_sprawdz(p_sprawdz VARCHAR2)
        RETURN NUMBER AS
  BEGIN
  if length(p_sprawdz)>0 then
    RETURN 1;
  else
    RETURN 0;
  end if;
  END pojazd_sprawdz;
  
   PROCEDURE pojazd_dodaj(p_marka IN POJAZDY.MARKA%TYPE,
                    p_typ IN POJAZDY.TYP%TYPE,
                    p_model IN POJAZDY.MODEL%TYPE) AS
    BEGIN
    INSERT INTO POJAZDY
    (
    MARKA,
    TYP,
    MODEL
    )
    VALUES(
    p_marka,
    p_typ,
    p_model
    );
    COMMIT;
    END pojazd_dodaj;
    
    PROCEDURE pojazd_usun(p_id IN POJAZDY.ID_POJAZD%TYPE) AS
    BEGIN
    DELETE FROM POJAZDY WHERE ID_POJAZD = p_id;
    END;
    
    PROCEDURE pojazd_edytuj(p_marka IN POJAZDY.MARKA%TYPE,
                    p_typ IN POJAZDY.TYP%TYPE,
                    p_model IN POJAZDY.MODEL%TYPE,
                    p_id IN POJAZDY.ID_POJAZD%TYPE) AS
    V_ROWID ROWID;
    BEGIN
    SELECT ROWID
    INTO   V_ROWID
    FROM   POJAZDY
    WHERE  ID_POJAZD = p_id
    FOR UPDATE;

    UPDATE POJAZDY
    SET    MARKA = p_marka, TYP = p_typ, MODEL = p_model
    WHERE  rowid    = v_rowid;
    COMMIT;
    END;
    
END POJAZD;

/
--------------------------------------------------------
--  DDL for Package Body PRZEWOZ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."PRZEWOZ" AS

  PROCEDURE dodaj_przewoz(przi_ilosc IN PRZEWOZ_INFO.ILOSC_OSOB%TYPE,
                        przi_ubezpieczenie IN PRZEWOZ_INFO.UBEZPIECZENIE%TYPE,
                        przi_idpojazd IN PRZEWOZ_INFO.ID_POJAZD%TYPE,
                        przi_kraj IN PRZEWOZ_INFO.KRAJ%TYPE,
                        przi_miasto IN PRZEWOZ_INFO.MIASTO%TYPE,
                        przi_adres IN PRZEWOZ_INFO.ADRES%TYPE,
                        przi_datawyj IN PRZEWOZ_INFO.DATA_WYJAZDU%TYPE,
                        przi_datapow IN PRZEWOZ_INFO.DATA_POWROTU%TYPE,
                        prz_idklient IN PRZEWOZ_OSOB.ID_KLIENT%TYPE,
                        prz_koszt IN PRZEWOZ_OSOB.KOSZT%TYPE,
                        prz_idpracownik IN PRZEWOZ_OSOB.ID_PRACOWNIK%TYPE,
                        prz_typ IN PRZEWOZ_OSOB.TYP_PRZEWOZU%TYPE) IS
  zmienna NUMBER;
  BEGIN
  INSERT INTO PRZEWOZ_INFO(
  ILOSC_OSOB,
  UBEZPIECZENIE,
  ID_POJAZD,
  KRAJ,
  MIASTO,
  ADRES,
  DATA_WYJAZDU,
  DATA_POWROTU
  )
  VALUES(
  przi_ilosc,
  przi_ubezpieczenie,
  przi_idpojazd,
  przi_kraj,
  przi_miasto,
  przi_adres,
  przi_datawyj,
  przi_datapow
  ) RETURNING ID_PRZEWOZ INTO zmienna;
  
   INSERT INTO PRZEWOZ_OSOB(
  ID_PRZEWOZ,
  ID_KLIENT,
  KOSZT,
  ID_PRACOWNIK,
  TYP_PRZEWOZU
  )
  VALUES(
  zmienna,
  prz_idklient,
  prz_koszt,
  prz_idpracownik,
  prz_typ
  );
  COMMIT;
   
  END dodaj_przewoz;

  PROCEDURE edytuj_przewoz(przi_ilosc IN PRZEWOZ_INFO.ILOSC_OSOB%TYPE,
                        przi_ubezpieczenie IN PRZEWOZ_INFO.UBEZPIECZENIE%TYPE,
                        przi_kraj IN PRZEWOZ_INFO.KRAJ%TYPE,
                        przi_miasto IN PRZEWOZ_INFO.MIASTO%TYPE,
                        przi_adres IN PRZEWOZ_INFO.ADRES%TYPE,
                        przi_datawyj IN PRZEWOZ_INFO.DATA_WYJAZDU%TYPE,
                        przi_datapow IN PRZEWOZ_INFO.DATA_POWROTU%TYPE,
                        prz_koszt IN PRZEWOZ_OSOB.KOSZT%TYPE,
                        przi_idprzewoz IN PRZEWOZ_INFO.ID_PRZEWOZ%TYPE
   ) AS
   V_ROWID ROWID;
    BEGIN                
    SELECT ROWID
    INTO   V_ROWID
    FROM   PRZEWOZ_INFO
    WHERE  ID_PRZEWOZ = przi_idprzewoz
    FOR UPDATE;

    UPDATE PRZEWOZ_INFO
    SET    ILOSC_OSOB = przi_ilosc, UBEZPIECZENIE = przi_ubezpieczenie, KRAJ = przi_kraj, MIASTO = przi_miasto, ADRES = przi_adres, DATA_WYJAZDU = przi_datawyj, DATA_POWROTU = przi_datapow
    WHERE  rowid    = v_rowid;
    COMMIT;
    
    SELECT ROWID
    INTO   V_ROWID
    FROM   PRZEWOZ_OSOB
    WHERE  ID_PRZEWOZ = przi_idprzewoz
    FOR UPDATE;

    UPDATE PRZEWOZ_OSOB
    SET    KOSZT = prz_koszt
    WHERE  rowid    = v_rowid;
    COMMIT;
    
    
    END;
    
    FUNCTION data_sprawdz(d_sprawdz DATE, d1_sprawdz DATE)  
                         RETURN NUMBER AS
    BEGIN
    if d_sprawdz < CURRENT_TIMESTAMP OR d1_sprawdz < CURRENT_TIMESTAMP THEN
        RETURN 1;
    else
        RETURN 0;
    end if;
    end data_sprawdz;
    
END PRZEWOZ;

/
--------------------------------------------------------
--  DDL for Package Body REJESTRACJA_KLIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."REJESTRACJA_KLIENT" AS

 --DODAJ KLIENTA
    PROCEDURE zarejestruj_klient(k_login  IN  UZYTKOWNICY.LOGIN%TYPE,
                      k_haslo  IN  UZYTKOWNICY.HASLO%TYPE,
                      k_idfunkcja in UZYTKOWNICY.ID_FUNKCJA%TYPE,
                      k_imie in UZYTKOWNIK_KLIENT.IMIE%TYPE,
                      k_nazwisko in UZYTKOWNIK_KLIENT.NAZWISKO%TYPE,
                      k_pesel in UZYTKOWNIK_KLIENT.PESEL%TYPE,
                      k_nrtel in UZYTKOWNIK_KLIENT.NR_TEL%TYPE,
                      k_adres in UZYTKOWNIK_KLIENT.ADRES%TYPE,
                      k_miasto in UZYTKOWNIK_KLIENT.MIASTO%TYPE,
                      k_kraj in UZYTKOWNIK_KLIENT.KRAJ%TYPE) IS
                      zmienna NUMBER;
BEGIN
    INSERT INTO UZYTKOWNICY (
      LOGIN,
      HASLO,
      ID_FUNKCJA
    )
    VALUES (
      k_login,
      k_haslo,
      k_idfunkcja
    ) RETURNING ID_UZYTKOWNIK INTO zmienna;
        
    INSERT INTO UZYTKOWNIK_KLIENT
    (
    IMIE,
    NAZWISKO,
    PESEL,
    NR_TEL,
    ADRES,
    MIASTO,
    KRAJ,
    ID_UZYTKOWNIK
    )
    VALUES(
    k_imie,
    k_nazwisko,
    k_pesel,
    k_nrtel,
    k_adres,
    k_miasto,
    k_kraj,
    zmienna
    );
    EXCEPTION
    WHEN DUP_VAL_ON_INDEX then RAISE_APPLICATION_ERROR(-20090, 'TAKI LOGIN JUZ ISTNIEJE!');
    COMMIT;
    END zarejestruj_klient;
    
    PROCEDURE edytuj_klient(k_imie in UZYTKOWNIK_KLIENT.IMIE%TYPE,
                      k_nazwisko in UZYTKOWNIK_KLIENT.NAZWISKO%TYPE,
                      k_pesel in UZYTKOWNIK_KLIENT.PESEL%TYPE,
                      k_nrtel in UZYTKOWNIK_KLIENT.NR_TEL%TYPE,
                      k_adres in UZYTKOWNIK_KLIENT.ADRES%TYPE,
                      k_miasto in UZYTKOWNIK_KLIENT.MIASTO%TYPE,
                      k_kraj in UZYTKOWNIK_KLIENT.KRAJ%TYPE,
                      k_idklient in UZYTKOWNIK_KLIENT.ID_KLIENT%TYPE)AS
                      V_ROWID ROWID;
    BEGIN
    SELECT ROWID
    INTO   V_ROWID
    FROM   UZYTKOWNIK_KLIENT
    WHERE  ID_KLIENT = k_idklient
    FOR UPDATE;

    UPDATE UZYTKOWNIK_KLIENT
    SET    IMIE = k_imie, NAZWISKO = k_nazwisko, PESEL = k_pesel, NR_TEL = k_nrtel, ADRES = k_adres, MIASTO = k_miasto, KRAJ = k_kraj
    WHERE  rowid    = v_rowid;
    COMMIT;
    END;  
    
 END REJESTRACJA_KLIENT;

/
--------------------------------------------------------
--  DDL for Package Body REJESTRACJA_PRACOWNIK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."REJESTRACJA_PRACOWNIK" AS

  PROCEDURE  zarejestruj_pracownik(u_login IN UZYTKOWNICY.LOGIN%TYPE,
                                u_haslo IN UZYTKOWNICY.HASLO%TYPE,
                                u_idfunkcja IN UZYTKOWNICY.ID_FUNKCJA%TYPE,
                                p_imie IN UZYTKOWNIK_PRACOWNIK.IMIE%TYPE,
                                p_nazwisko IN UZYTKOWNIK_PRACOWNIK.NAZWISKO%TYPE,
                                p_pesel IN UZYTKOWNIK_PRACOWNIK.PESEL%TYPE,
                                p_nrtel IN UZYTKOWNIK_PRACOWNIK.NR_TEL%TYPE) AS                                 
                                zmienna NUMBER;

BEGIN
    INSERT INTO UZYTKOWNICY (
      LOGIN,
      HASLO,
      ID_FUNKCJA
    )
    VALUES (
      u_login,
      u_haslo,
      u_idfunkcja
    ) RETURNING ID_UZYTKOWNIK INTO zmienna;
        
    INSERT INTO UZYTKOWNIK_PRACOWNIK
    (
    IMIE,
    NAZWISKO,
    PESEL,
    NR_TEL,
    ID_UZYTKOWNIK
    )
    VALUES(
    p_imie,
    p_nazwisko,
    p_pesel,
    p_nrtel,
    zmienna
    );
    EXCEPTION
    WHEN DUP_VAL_ON_INDEX then RAISE_APPLICATION_ERROR(-20090, 'TAKI LOGIN JUZ ISTNIEJE!');
    COMMIT;
  END zarejestruj_pracownik;

  PROCEDURE pracownik_usun(p_id IN UZYTKOWNIK_PRACOWNIK.ID_UZYTKOWNIK%TYPE) AS
    BEGIN
    DELETE FROM UZYTKOWNIK_PRACOWNIK WHERE ID_UZYTKOWNIK = p_id;
    DELETE FROM UZYTKOWNICY WHERE ID_UZYTKOWNIK = p_id;
    END pracownik_usun;
    
    
    PROCEDURE pracownik_edytuj(u_haslo IN UZYTKOWNICY.HASLO%TYPE,
                    u_funkcja IN UZYTKOWNICY.ID_FUNKCJA%TYPE,
                    u_uzytkownik IN UZYTKOWNICY.ID_UZYTKOWNIK%TYPE,
                    p_imie IN UZYTKOWNIK_PRACOWNIK.IMIE%TYPE,
                    p_nazwisko IN UZYTKOWNIK_PRACOWNIK.NAZWISKO%TYPE,
                    p_pesel IN UZYTKOWNIK_PRACOWNIK.PESEL%TYPE,
                    p_nrtel IN UZYTKOWNIK_PRACOWNIK.NR_TEL%TYPE
                    ) AS
    V_ROWID ROWID;
    BEGIN
    SELECT ROWID
    INTO   V_ROWID
    FROM   UZYTKOWNICY
    WHERE  ID_UZYTKOWNIK = u_uzytkownik
    FOR UPDATE;

    UPDATE UZYTKOWNICY
    SET    HASLO = u_haslo, ID_FUNKCJA = u_funkcja
    WHERE  rowid    = v_rowid;
    COMMIT;

    SELECT ROWID
    INTO   V_ROWID
    FROM   UZYTKOWNIK_PRACOWNIK
    WHERE  ID_UZYTKOWNIK = u_uzytkownik
    FOR UPDATE;

    UPDATE UZYTKOWNIK_PRACOWNIK
    SET    IMIE = p_imie, NAZWISKO = p_nazwisko, PESEL = p_pesel, NR_TEL = p_nrtel
    WHERE  rowid    = v_rowid;
    COMMIT;
    END;
    
END REJESTRACJA_PRACOWNIK;

/
--------------------------------------------------------
--  DDL for Package Body WYPELNIJ
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."WYPELNIJ" AS

  PROCEDURE wypelnij_pracownik(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   U.ID_UZYTKOWNIK, 
   U.LOGIN, 
   U.HASLO, 
   U.ID_FUNKCJA, 
   UP.IMIE, 
   UP.NAZWISKO, 
   UP.PESEL, 
   UP.NR_TEL, 
   UP.ID_UZYTKOWNIK, 
   F.FUNKCJA
   FROM 
   UZYTKOWNICY U, 
   UZYTKOWNIK_PRACOWNIK UP, 
   FUNKCJA F
   WHERE U.ID_UZYTKOWNIK = UP.ID_UZYTKOWNIK
   AND U.ID_FUNKCJA = F.ID_FUNKCJA;
    NULL;
  END wypelnij_pracownik;
  
  PROCEDURE wypelnij_pojazd(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   P.*
   FROM 
   POJAZDY P;
    NULL;
  END wypelnij_pojazd;
  
  PROCEDURE wypelnij_paczki(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   PI.ID_TRANSPORT,
   P.ID_TRANSPORT, 
   PI.TYP_PRZESYLKI, 
   PI.ROZMIAR, 
   PI.WAGA, 
   PI.UBEZPIECZENIE, 
   P.NAZWA_PRZESYLKI, 
   P.STATUS, 
   P.KOSZT
   FROM 
   PRZESYLKI_INFO PI,
   PRZESYLKA P
   WHERE PI.ID_TRANSPORT = P.ID_TRANSPORT;
    NULL;
  END wypelnij_paczki;
  
  PROCEDURE wypelnij_transport(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   PI.KRAJ,
   PI.MIASTO,
   PI.ADRES,
   PI.DATA_WYJAZDU,
   PI.DATA_POWROTU, 
   PI.ILOSC_OSOB, 
   PI.UBEZPIECZENIE, 
   P.KOSZT, 
   PI.ID_PRZEWOZ
   FROM 
   PRZEWOZ_INFO PI, 
   PRZEWOZ_OSOB P
   WHERE PI.ID_PRZEWOZ = P.ID_PRZEWOZ;
    NULL;
  END wypelnij_transport;
  
  PROCEDURE wypelnij_klient(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   U.*
   FROM 
   UZYTKOWNIK_KLIENT U;
    NULL;
  END wypelnij_klient;
  
  PROCEDURE wypelnij_odbiorca(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   O.*
   FROM 
   ODBIORCA O;
    NULL;
  END wypelnij_odbiorca;
  
  PROCEDURE wypelnij_pojazdP(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   P.*
   FROM 
   POJAZDY P
   WHERE TYP = 'Transport paczek';
    NULL;
  END wypelnij_pojazdP;

  PROCEDURE wypelnij_pojazdO(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   P.*
   FROM 
   POJAZDY P
   WHERE TYP = 'Transport osÃ³b';
    NULL;
  END wypelnij_pojazdO;
  
  PROCEDURE wypelnij_paczkiKurier(p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   PI.ID_TRANSPORT,
   P.ID_TRANSPORT, 
   PI.TYP_PRZESYLKI, 
   PI.ROZMIAR, 
   PI.WAGA, 
   PI.UBEZPIECZENIE, 
   P.NAZWA_PRZESYLKI, 
   P.STATUS, 
   P.KOSZT
   FROM 
   PRZESYLKI_INFO PI,
   PRZESYLKA P
  WHERE PI.ID_TRANSPORT = P.ID_TRANSPORT
  AND NOT P.STATUS = 'Dostarczona';
    NULL;
  END wypelnij_paczkiKurier;
  
  PROCEDURE wypelnij_transportKlient(id IN PRZEWOZ_OSOB.ID_KLIENT%TYPE, p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   PI.KRAJ,
   PI.MIASTO,
   PI.ADRES,
   PI.DATA_WYJAZDU,
   PI.DATA_POWROTU, 
   PI.ILOSC_OSOB, 
   PI.UBEZPIECZENIE, 
   P.KOSZT, 
   PI.ID_PRZEWOZ
   FROM 
   PRZEWOZ_INFO PI, 
   PRZEWOZ_OSOB P
   WHERE PI.ID_PRZEWOZ = P.ID_PRZEWOZ
   AND P.ID_KLIENT = id;
    NULL;
  END wypelnij_transportKlient;
  
  PROCEDURE wypelnij_paczkiKlient(id IN NUMBER, p_wynik OUT SYS_REFCURSOR) AS
  BEGIN
  OPEN p_wynik FOR 
   SELECT 
   PI.ID_TRANSPORT,
   P.ID_TRANSPORT, 
   PI.TYP_PRZESYLKI, 
   PI.ROZMIAR, 
   PI.WAGA, 
   PI.UBEZPIECZENIE, 
   P.NAZWA_PRZESYLKI, 
   P.STATUS, 
   P.KOSZT
   FROM 
   PRZESYLKI_INFO PI, 
   PRZESYLKA P
   WHERE PI.ID_TRANSPORT = P.ID_TRANSPORT
   AND P.ID_KLIENT = id;
    NULL;
  END wypelnij_paczkiKlient;
  
END WYPELNIJ;

/
--------------------------------------------------------
--  DDL for Package Body WYSZUKIWANIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "C##FILIP"."WYSZUKIWANIE" AS

    PROCEDURE szukaj_pracownika(u_szukane IN VARCHAR2,
                            u_wynik OUT SYS_REFCURSOR ) AS
    BEGIN
    OPEN u_wynik FOR 
    SELECT
    U.ID_UZYTKOWNIK, 
    U.LOGIN, 
    U.HASLO, 
    U.ID_FUNKCJA, 
    UP.IMIE, 
    UP.NAZWISKO, 
    UP.PESEL, 
    UP.NR_TEL, 
    UP.ID_UZYTKOWNIK, 
    F.FUNKCJA
    FROM
    UZYTKOWNICY u,
    UZYTKOWNIK_PRACOWNIK up,
    FUNKCJA f
    WHERE u.ID_UZYTKOWNIK = up.ID_UZYTKOWNIK
    AND u.id_FUNKCJA = f.ID_FUNKCJA
    AND ( ( instr(upper(u.LOGIN), upper(u_szukane), 1 ) ) >0
    OR (  instr(upper(up.IMIE), upper(u_szukane), 1 ) ) >0
    OR (  instr(upper(up.NAZWISKO), upper(u_szukane), 1 ) ) >0
    OR (  instr(upper(f.FUNKCJA), upper(u_szukane), 1 )  >0) );
    NULL;
    END;
    
    PROCEDURE szukaj_odbiorcy(o_szukane IN VARCHAR2,
                            o_wynik OUT SYS_REFCURSOR ) AS
    BEGIN
    OPEN o_wynik FOR 
    SELECT *
    FROM
    ODBIORCA 
    WHERE ( ( instr(upper(IMIE), upper(o_szukane), 1 ) ) >0
    OR ( instr(upper(NAZWISKO), upper(o_szukane), 1 ) ) >0
    OR ( instr(upper(MIASTO), upper(o_szukane), 1 ) ) >0
    OR ( instr(upper(KRAJ), upper(o_szukane), 1 ) ) >0
    OR ( instr(upper(ADRES), upper(o_szukane), 1 ) >0 ) );
    NULL;
    END;
    
    PROCEDURE szukaj_klient(k_szukane IN VARCHAR2,
                            k_wynik OUT SYS_REFCURSOR ) AS
    BEGIN
    OPEN k_wynik FOR 
    SELECT *
    FROM
    UZYTKOWNIK_KLIENT 
    WHERE ( ( instr(upper(IMIE), upper(k_szukane), 1 ) ) >0
    OR ( instr(upper(NAZWISKO), upper(k_szukane), 1 ) ) >0
    OR ( instr(upper(MIASTO), upper(k_szukane), 1 ) ) >0
    OR ( instr(upper(KRAJ), upper(k_szukane), 1 ) ) >0
    OR ( instr(upper(ADRES), upper(k_szukane), 1 ) )>0 
    OR ( instr(PESEL, k_szukane, 1 ) >0 ) );
    NULL;
    END;
    
    PROCEDURE szukaj_paczki(p_szukane IN VARCHAR2,
                            p_wynik OUT SYS_REFCURSOR, p_id IN NUMBER ) AS
    BEGIN
    OPEN p_wynik FOR 
    SELECT 
    PI.ID_TRANSPORT,
    P.ID_TRANSPORT, 
    PI.TYP_PRZESYLKI, 
    PI.ROZMIAR, 
    PI.WAGA, 
    PI.UBEZPIECZENIE, 
    P.NAZWA_PRZESYLKI, 
    P.STATUS, 
    P.KOSZT
    FROM
    PRZESYLKI_INFO PI,
    PRZESYLKA P
    WHERE PI.ID_TRANSPORT = P.ID_TRANSPORT
    AND P.ID_KLIENT = p_id
    AND (INSTR(UPPER(P.NAZWA_PRZESYLKI), UPPER(p_szukane),1) > 0 
    OR ( instr(PI.WAGA, p_szukane, 1 ) ) >0
    OR ( instr(P.KOSZT, p_szukane, 1 ) ) >0
    OR ( instr(upper(P.STATUS), upper(p_szukane), 1 ) )>0 
    OR ( instr(upper(PI.ROZMIAR), upper(p_szukane), 1 ) )>0 
    OR ( instr(upper(PI.TYP_PRZESYLKI), upper(p_szukane), 1 ) )>0 );
    END;
    
    
    PROCEDURE szukaj_transport(t_szukane IN VARCHAR2,
                            t_wynik OUT SYS_REFCURSOR, t_id IN NUMBER ) AS
    BEGIN
    OPEN t_wynik FOR 
    SELECT 
    PI.KRAJ,
    PI.MIASTO,
    PI.ADRES,
    PI.DATA_WYJAZDU,
    PI.DATA_POWROTU, 
    PI.ILOSC_OSOB, 
    PI.UBEZPIECZENIE, 
    P.KOSZT, 
    PI.ID_PRZEWOZ
    FROM
    PRZEWOZ_INFO PI,
    PRZEWOZ_OSOB P
    WHERE PI.ID_PRZEWOZ = P.ID_PRZEWOZ
    AND P.ID_KLIENT = t_id
    AND (INSTR(UPPER(PI.ADRES), UPPER(t_szukane),1) > 0 
    OR ( INSTR(P.KOSZT, t_szukane, 1 ) ) >0
    OR ( INSTR(PI.ILOSC_OSOB, t_szukane, 1 ) ) >0
    OR ( INSTR(TO_CHAR(PI.DATA_WYJAZDU, 'YYYY-MM-DD'), t_szukane, 1) )> 0 
    OR ( INSTR(TO_CHAR(PI.DATA_POWROTU, 'YYYY-MM-DD'), t_szukane, 1) )> 0
    OR ( INSTR(UPPER(PI.KRAJ), UPPER(t_szukane),1) > 0 )
    OR ( INSTR(UPPER(PI.MIASTO), UPPER(t_szukane),1) > 0 )
     );
    END;
    
    PROCEDURE szukaj_pojazdy(p_szukane IN VARCHAR2,
                            p_wynik OUT SYS_REFCURSOR ) AS
    BEGIN
    OPEN p_wynik FOR 
    SELECT *
    FROM
    POJAZDY 
    WHERE ( ( instr(upper(MARKA), upper(p_szukane), 1 ) ) >0
    OR ( instr(upper(MODEL), upper(p_szukane), 1 ) ) >0
    OR ( instr(upper(TYP), upper(p_szukane), 1 ) >0 ) );
    NULL;
    END;
    
END WYSZUKIWANIE;

/
--------------------------------------------------------
--  Constraints for Table ODBIORCA
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("ID_ODBIORCA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("IMIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("NAZWISKO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("PESEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("KRAJ" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("MIASTO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("ADRES" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" MODIFY ("NR_TEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."ODBIORCA" ADD CONSTRAINT "ODBIORCA_PK" PRIMARY KEY ("ID_ODBIORCA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FUNKCJA
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."FUNKCJA" MODIFY ("ID_FUNKCJA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."FUNKCJA" MODIFY ("FUNKCJA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."FUNKCJA" ADD CONSTRAINT "FUNKCJA_PK" PRIMARY KEY ("ID_FUNKCJA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRZEWOZ_OSOB
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("ID_PRZEWOZ_OSOB" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("ID_PRZEWOZ" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("ID_KLIENT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" ADD CONSTRAINT "PRZEWOZ_OSOB_PK" PRIMARY KEY ("ID_PRZEWOZ_OSOB")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("KOSZT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" ADD CONSTRAINT "PRZEWOZ_OSOB_UK1" UNIQUE ("ID_PRZEWOZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("ID_PRACOWNIK" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" MODIFY ("TYP_PRZEWOZU" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UZYTKOWNIK_PRACOWNIK
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("ID_PRACOWNIK" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("IMIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("NAZWISKO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("PESEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("NR_TEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ADD CONSTRAINT "UZYTKOWNIK_PRACOWNIK_PK" PRIMARY KEY ("ID_PRACOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ADD CONSTRAINT "UZYTKOWNIK_PRACOWNIK_UK1" UNIQUE ("ID_UZYTKOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" MODIFY ("ID_UZYTKOWNIK" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRZESYLKA
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("ID_PRZESYLKA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "FINAL_PRZESYLKA_PK" PRIMARY KEY ("ID_PRZESYLKA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("ID_ODBIORCA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("ID_TRANSPORT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("ID_KLIENT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("NAZWA_PRZESYLKI" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("STATUS" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("KOSZT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" MODIFY ("ID_PRACOWNIK" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "PRZESYLKA_UK1" UNIQUE ("ID_TRANSPORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UZYTKOWNICY
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNICY" MODIFY ("ID_UZYTKOWNIK" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNICY" ADD CONSTRAINT "UZYTKOWNICY_PK" PRIMARY KEY ("ID_UZYTKOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."UZYTKOWNICY" MODIFY ("ID_FUNKCJA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNICY" MODIFY ("LOGIN" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNICY" MODIFY ("HASLO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNICY" ADD CONSTRAINT "UZYTKOWNICY_UK1" UNIQUE ("LOGIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRZEWOZ_INFO
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("ID_PRZEWOZ" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("ILOSC_OSOB" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("UBEZPIECZENIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" ADD CONSTRAINT "TYP_PRZEWOZU_PK" PRIMARY KEY ("ID_PRZEWOZ")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("ID_POJAZD" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("KRAJ" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("MIASTO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("ADRES" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("DATA_WYJAZDU" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" MODIFY ("DATA_POWROTU" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRZESYLKI_INFO
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("ID_TRANSPORT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" ADD CONSTRAINT "PRZESYLKA_PK" PRIMARY KEY ("ID_TRANSPORT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("UBEZPIECZENIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("TYP_PRZESYLKI" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("ROZMIAR" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("WAGA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" MODIFY ("ID_POJAZD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CENY
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."CENY" MODIFY ("ID_CENY" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("ILOSC_OSOB" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("ROZMIAR" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("WAGA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("TYP" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("UBEZPIECZENIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" MODIFY ("DZIEN" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."CENY" ADD CONSTRAINT "CENY_PK" PRIMARY KEY ("ID_CENY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UZYTKOWNIK_KLIENT
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("ID_KLIENT" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" ADD CONSTRAINT "UZYTKOWNIK_KLIENT_PK" PRIMARY KEY ("ID_KLIENT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("IMIE" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("NAZWISKO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("PESEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("NR_TEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("ADRES" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" ADD CONSTRAINT "UZYTKOWNIK_KLIENT_UK1" UNIQUE ("ID_UZYTKOWNIK")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("MIASTO" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("KRAJ" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" MODIFY ("ID_UZYTKOWNIK" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table POJAZDY
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."POJAZDY" MODIFY ("MODEL" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."POJAZDY" MODIFY ("ID_POJAZD" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."POJAZDY" MODIFY ("MARKA" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."POJAZDY" MODIFY ("TYP" NOT NULL ENABLE);
  ALTER TABLE "C##FILIP"."POJAZDY" ADD CONSTRAINT "POJAZDY_PK" PRIMARY KEY ("ID_POJAZD")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRZESYLKA
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "PRZESYLKA_FK1" FOREIGN KEY ("ID_TRANSPORT")
	  REFERENCES "C##FILIP"."PRZESYLKI_INFO" ("ID_TRANSPORT") ENABLE;
  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "PRZESYLKA_FK2" FOREIGN KEY ("ID_ODBIORCA")
	  REFERENCES "C##FILIP"."ODBIORCA" ("ID_ODBIORCA") ENABLE;
  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "PRZESYLKA_FK3" FOREIGN KEY ("ID_KLIENT")
	  REFERENCES "C##FILIP"."UZYTKOWNIK_KLIENT" ("ID_KLIENT") ENABLE;
  ALTER TABLE "C##FILIP"."PRZESYLKA" ADD CONSTRAINT "PRZESYLKA_FK4" FOREIGN KEY ("ID_PRACOWNIK")
	  REFERENCES "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ("ID_PRACOWNIK") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRZESYLKI_INFO
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZESYLKI_INFO" ADD CONSTRAINT "PRZESYLKI_INFO_FK1" FOREIGN KEY ("ID_POJAZD")
	  REFERENCES "C##FILIP"."POJAZDY" ("ID_POJAZD") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRZEWOZ_INFO
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZEWOZ_INFO" ADD CONSTRAINT "PRZEWOZ_INFO_FK1" FOREIGN KEY ("ID_POJAZD")
	  REFERENCES "C##FILIP"."POJAZDY" ("ID_POJAZD") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRZEWOZ_OSOB
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" ADD CONSTRAINT "PRZEWOZ_OSOB_FK1" FOREIGN KEY ("ID_PRZEWOZ")
	  REFERENCES "C##FILIP"."PRZEWOZ_INFO" ("ID_PRZEWOZ") ENABLE;
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" ADD CONSTRAINT "PRZEWOZ_OSOB_FK2" FOREIGN KEY ("ID_KLIENT")
	  REFERENCES "C##FILIP"."UZYTKOWNIK_KLIENT" ("ID_KLIENT") ENABLE;
  ALTER TABLE "C##FILIP"."PRZEWOZ_OSOB" ADD CONSTRAINT "PRZEWOZ_OSOB_FK3" FOREIGN KEY ("ID_PRACOWNIK")
	  REFERENCES "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ("ID_PRACOWNIK") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UZYTKOWNICY
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNICY" ADD CONSTRAINT "UZYTKOWNICY_FK1" FOREIGN KEY ("ID_FUNKCJA")
	  REFERENCES "C##FILIP"."FUNKCJA" ("ID_FUNKCJA") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UZYTKOWNIK_KLIENT
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNIK_KLIENT" ADD CONSTRAINT "UZYTKOWNIK_KLIENT_FK1" FOREIGN KEY ("ID_UZYTKOWNIK")
	  REFERENCES "C##FILIP"."UZYTKOWNICY" ("ID_UZYTKOWNIK") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table UZYTKOWNIK_PRACOWNIK
--------------------------------------------------------

  ALTER TABLE "C##FILIP"."UZYTKOWNIK_PRACOWNIK" ADD CONSTRAINT "UZYTKOWNIK_PRACOWNIK_FK1" FOREIGN KEY ("ID_UZYTKOWNIK")
	  REFERENCES "C##FILIP"."UZYTKOWNICY" ("ID_UZYTKOWNIK") ENABLE;
